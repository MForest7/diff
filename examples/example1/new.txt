#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#define pb emplace_back
#define mp make_pair
#define fi first
#define se second
#define all(x) (x).begin(), (x).end()
#define in(x); { for (auto &i : x) cin >> i; }
#define out(x); { for (auto &i : x) cout << i << ' '; cout << endl; }

using namespace std;
using namespace __gnu_cxx;
using namespace __gnu_pbds;

typedef long long ll;
typedef pair <int, int> pii;
typedef pair <long long, long long> pll;
typedef vector <int> vi;
typedef vector <long long> vll;
typedef vector <vector <int>> vvi;
typedef vector <pair <int, int>> vii;
typedef tree <int, null_type, less <int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const int INF = 2e9;
const long long INFll = 1e18;
const long long mod = 1000000007;
const int base1 = 239;
const int base2 = 653;
const long double eps = 1e-4;
const long double pi = acos(-1);
const int N = 4e5 + 10;

pii e[N];
int w[N];

int par[N];
void init_dsu(int n) {
    for (int i = 1; i <= n; i++)
        par[i] = i;
}

int get(int x) {
    return (par[x] == x ? x : par[x] = get(par[x]));
}

bool unite(int x, int y) {
    x = get(x), y = get(y);
    if (x == y) return false;
    par[x] = y;
    return true;
}

bool capital(int i) {
    return (e[i].fi == 1 || e[i].se == 1);
}

int build(int n, int m, ll lambda, vi &ans, int k) {
    vi p(m);
    for (int i = 0; i < m; i++)
        p[i] = i;

    sort(all(p), [lambda](int i, int j) {
        if (w[i] + lambda * capital(i) == w[j] + lambda * capital(j))
            return (capital(i) && !capital(j));
        return (w[i] + lambda * capital(i) < w[j] + lambda * capital(j));
    });

    init_dsu(n);
    int cnt_cap = 0;
    for (int i : p) {
        if (get(e[i].fi) != get(e[i].se)) {
            if (capital(i) && cnt_cap == k) continue;

            ans.pb(i);
            cnt_cap += capital(i);
            unite(e[i].fi, e[i].se);
        }
    }

    if (ans.size() < n - 1)
        return k + 1;
    else
        return cnt_cap;
}

void solve() {
    int n, m, k; cin >> n >> m >> k;
    for (int i = 0; i < m; i++) {
        ll x, y, c; cin >> x >> y >> c;
        e[i] = mp(x, y);
        w[i] = c;
    }

    ll l = -INF, r = INF;
    while (r - l > 1) {
        ll la = (l + r) / 2;
        vi u;
        //cout << "la = " << la << endl;
        //cout << " y = " << build(n, m, la, u, k) << endl;
        if (build(n, m, la, u, k) < k)
            r = la;
        else
            l = la;
    }

    vi ans;
    int y = build(n, m, l, ans, k);

    if (ans.size() != n - 1 || y != k) {
        cout << "-1"; return;
    }

    cout << n - 1 << "\n";
    for (int i : ans)
        cout << i + 1 << ' ';
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    //freopen("input.txt", "r", stdin);

    int t = 1;
    //cin >> t;
    while (t--)
        solve();
}
